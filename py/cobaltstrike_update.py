#!/usr/bin/env python
#coding=utf-8

# By DarkR4y
import sys
import os
import platform
import re
import urllib2
import time
import subprocess
import shutil
from optparse import OptionParser

current_path = os.getcwd()
current_os = platform.system()
if current_os == 'Darwin':
    cb_folder = 'Cobalt Strike'
else:
    cb_folder = 'cobaltstrike'
base_url = 'http://www.advancedpentest.com/'
download_url = 'download'
changelog_url = 'releasenotes.txt'
search_str = '- Cobalt Strike'
vpn_need_str = 'request a direct download'
header = { "User-Agent" : "Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:2.0b13pre) Gecko/20110307 Firefox/4.0b13pre" }
save_name = ''
jar_path = ''
temp_folder = 'cb_jar_temp'
crack_keyword = '$life  = 21;'
crack_nag_keyword = 'This is a trial version of Cobalt Strike.\\nYou have $form left of your trial.\\n\\nIf you purchased Cobalt Strike. Run the\\nUpdate program and enter your license.'

#get from http://stackoverflow.com/questions/2028517/python-urllib2-progress-hook
def chunk_report(bytes_so_far, chunk_size, total_size):
    percent = float(bytes_so_far) / total_size
    percent = round(percent*100, 2)
    sys.stdout.write("Downloaded %d of %d bytes (%0.2f%%)\r" % 
       (bytes_so_far, total_size, percent))

    if bytes_so_far >= total_size:
        sys.stdout.write('\n')

def chunk_read(response, save_path , chunk_size= 8 * 1024 , report_hook=None): #default is 8192
    total_size = response.info().getheader('Content-Length').strip()
    total_size = int(total_size)
    bytes_so_far = 0
    # insert
    if os.path.exists(save_path):
        if os.path.getsize(save_path) == total_size:
            print '[***] Cobaltstrike already exists ...'
            return
    with open(save_path, 'wb') as fp:
        while True:
            chunk = response.read(chunk_size)
           
            bytes_so_far += len(chunk)
        
            if not chunk:
                break
            fp.write(chunk) 
            if report_hook:
                report_hook(bytes_so_far, chunk_size, total_size)
          
    return bytes_so_far


def http_down( url , save_path):
    request = urllib2.Request(url)
    request.add_header('User-Agent', 'Mozilla/5.0 (Windows; U; Windows NT 5.1; zh-CN; rv:1.8.1.14) Gecko/20080404 (FoxPlus) Firefox/2.0.0.14')
    response = urllib2.urlopen(request,timeout=30)
    #with open(save_path, 'wb') as fp:
        #shutil.copyfileobj(response, fp)    
    chunk_read(response, save_path ,report_hook=chunk_report)
        
    pass

  
def http_get( url ):
    request = urllib2.Request(url)
    request.add_header('User-Agent', 'Mozilla/5.0 (Windows; U; Windows NT 5.1; zh-CN; rv:1.8.1.14) Gecko/20080404 (FoxPlus) Firefox/2.0.0.14')
    reader = urllib2.urlopen(request,timeout=30) 
    return reader.read()     
    pass

def month2int(m):
    if m == 'Jan':
        return 1
    elif m == 'Feb':
        return 2
    elif m == 'Mar':
        return 3
    elif m == 'Apr':
        return 4
    elif m == 'May':
        return 5
    elif m == 'Jun':
        return 6
    elif m == 'Jul':
        return 7
    elif m == 'Aug':
        return 8
    elif m == 'Sep':
        return 9
    elif m == 'Oct':
        return 10
    elif m == 'Nov':
        return 11
    elif m == 'Dec':
        return 12
    pass



def WriteFile(file_read,file_apend , source_str , replace_str ):  
    file_object_read = open(file_read, 'r')   
    try:  
        stringsave=""  
        stringread=file_object_read.readline()  
        while stringread:  
            #print stringread
            stringread=stringread.replace(source_str, replace_str)  
            #print 'shit - ' + stringread
            stringsave=stringsave+stringread  
            stringread=file_object_read.readline()  
        file_object_save = open(file_apend, 'w')  
        file_object_save.write(stringsave)    
    finally:  
        file_object_read.close()  
        file_object_save.close()
        
        
def cracknow():
    #fuck trial days limit
    license_file = temp_folder + os.sep + "scripts" + os.sep + "license.sl"
    WriteFile(license_file,license_file,crack_keyword,"$life  = 9999;")
    WriteFile(license_file,license_file,crack_nag_keyword,'\\n Cracked by DarkRay \\n www.blackh4t.org \\n')
    pass

def my_exec(command , shell = None):
    p=subprocess.Popen(command, shell=True,   executable=shell ,stdout=subprocess.PIPE, stderr=subprocess.PIPE)  
    stdoutput , erroutput  = p.communicate()
    if erroutput == '':
        print 'Exec command [ %s ] successful' % (command)
    else:
        print erroutput
    pass    

def zip_file( plat ):
    global jar_path
    if plat == 'Darwin': #macosx
        shit_cmd = 'cd ' + current_path + os.sep + temp_folder + ' && zip -rq ../cobaltstrike.jar .'
        my_exec(shit_cmd , 'bash')
        shutil.move('cobaltstrike.jar', jar_path)
        shutil.rmtree(temp_folder)
        print '[***] Replace the origin bin sueccssfully. done!'
    elif plat == 'Linux':
        shit_cmd = 'cd ' + current_path + os.sep + temp_folder + ' && zip -rq ../cobaltstrike.jar .'
        my_exec(shit_cmd,'bash')
        shutil.move('cobaltstrike.jar', jar_path)
        shutil.rmtree(temp_folder)       
        print '[***] Replace the origin bin sueccssfully. done!'
        pass
    elif plat == 'Windows':
        pass
    
    pass

def extra_file( plat ):
    global save_name,jar_path
    path = current_path + os.sep + save_name
    if plat == 'Darwin' : #macosx
        
        shit_cmd = "cp -R \"/Volumes/" + cb_folder + os.sep + cb_folder + "\" \"" + current_path + os.sep + cb_folder + "\""
        my_exec("hdiutil attach " + path)
        my_exec(shit_cmd)
        my_exec("hdiutil detach \"/Volumes/" + cb_folder + "\" ")
        jar_path = current_path + os.sep + cb_folder + os.sep + "Cobalt Strike.app/Contents/Java/cobaltstrike.jar"
        shit_cmd = "unzip \"" + jar_path + "\" -d " + temp_folder
        my_exec(shit_cmd)
    elif plat == 'Linux': #Linux
        my_exec('tar zxvf ' + path)
        jar_path = current_path + os.sep + cb_folder + os.sep + "cobaltstrike.jar"
        my_exec('unzip ' + jar_path + ' -d ' + temp_folder)
        pass
    elif plat == 'Windows': #windows
        pass
    
    
    pass

def download_file( plat ):
    global save_name
    url = base_url + download_url
    res = http_get(url)
    m = re.search(vpn_need_str, res)
    if m is None:
        url_re = re.compile(r'href="(.+?)"')
        all_href = re.findall(url_re,res)
        #print all_href
        for i in all_href:
            if i[-3:] == 'zip':
                if plat == 'Darwin':
                    real_url = base_url + i[:-3] + 'dmg'
                elif plat == 'Linux':
                    real_url = base_url + i[:-3] + 'tgz'
                else:
                    real_url = base_url + i # Win version is zip
                print "[***] Get the real download url is %s ..." % real_url
                save_name = real_url.split('/')[-1]
                #print save_name
                start_time = time.time()
                down_res = http_down(real_url , save_name)
                end_time = time.time()
                break
        if os.path.exists(save_name):
            print '[***] Cobaltstrike download sueccssfully. total time cost: %ds' % (end_time - start_time)
        else:
            print '[***] Something is wrong ...'
                
    else:
        print '[***] You need download cobaltstrike via vpn from USA ...'
        sys.exit()
    pass

def get_local_version():
    fname = current_path +  os.sep + cb_folder + os.sep + changelog_url
    if os.path.isfile(fname):
        f = open(fname,'rb')
        for line in f:
            pos = [m.start() for m in re.finditer(search_str, line)]
            if pos != [0] and pos != []:    
                realse_date = line[:pos[0] - 1 ]
                version = line[pos[0] + len(search_str): -2]
                print "current version is [%s], release date is [ %s ]" % (version , realse_date)
                break
        f.close()
        return version,realse_date
        pass
    else:
        print '[***] Wrong cobaltstrike path ...'

def get_update_version():
    print '[***] Fetching remote version ,plz wait ...'
    url = base_url + changelog_url 
    res = http_get(url)
    f = open('tmp.txt','wb')
    f.write(res)
    f.close()
    fr = open('tmp.txt','rb')
    for line in fr:
        pos = [m.start() for m in re.finditer(search_str, line)]
        if pos != [0] and pos != []:
            realse_date = line[:pos[0] - 1 ]
            version = line[pos[0] + len(search_str): -2]
            print "update version is [%s], release date is [ %s ]" % (version , realse_date)
            break 
    fr.close()
    os.remove(current_path + os.sep + 'tmp.txt')
    return version,realse_date
    pass

def install():
    print '[***] Searching the cobaltstrike download url ...' 
    download_file(current_os)
    extra_file(current_os)
    cracknow()
    zip_file(current_os)
    pass


def compare_date( date1 , date2):
    d1,m1,y1 = date1.split(' ')
    d2,m2,y2 = date2.split(' ')
    m1 = month2int(m1)
    m2 = month2int(m2)
    if y1 >= y2:
        if m1 >= m2:
            if d1 >= d2:
                return True        
    else: 
        return False

    pass

def update():
    old_v , old_date = get_local_version()
    new_v , new_date = get_update_version() 
    if float(old_v) > float(new_v):
        print '[***] Nothing to update ...'
    elif float(old_v) == float(new_v):
        if compare_date(old_date , new_date) == True: # old_date > new_date
            print '[***] Nothing to update ...'
        else:
            install()
    else:
        install()
    pass

''' Main Entry '''
def main(argv=None): # 
    '''Hello Opt'''
    parser = OptionParser() 
    parser.add_option("-i", "--install", action="store_true", 
                      dest="install", 
                      default=False, 
                      help="install cobaltstrike to current folder") 
    parser.add_option("-u", "--update", action="store_true", 
                      dest="update", 
                      default=False, 
                      help="update cobaltstrike") 
    parser.add_option("-c", "--crack", action="store_true", 
                          dest="crack", 
                          default=False, 
                          help="just crack the cobaltstrike!")    

    (options, args) = parser.parse_args() 
    
    if options.install==True: 
        print '[***] Cobalt Strike Installer'
        install() 
        
    if options.update ==True:
        print '[***] Cobalt Strike Updater'
        update()
        
    
    


if __name__ == "__main__":
    main()
